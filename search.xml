<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows环境下JDK1.8.0安装与环境变量配置</title>
    <url>/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="一、准备工具"><a href="#一、准备工具" class="headerlink" title="一、准备工具"></a>一、准备工具</h3><h4 id="1-JDK"><a href="#1-JDK" class="headerlink" title="1.JDK"></a>1.JDK</h4><p>JDK安装包：jdk-8u202-windows-x64.exe<br><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a><br>链接：<a href="https://pan.baidu.com/s/1_xEszoPjFIyic61FbFo2cg">https://pan.baidu.com/s/1_xEszoPjFIyic61FbFo2cg</a><br>提取码：x6v8</p>
<h4 id="2-安装前："><a href="#2-安装前：" class="headerlink" title="2.安装前："></a>2.安装前：</h4><p>检验是否配置jdk ctrl+R 运行cmd 分别输入java，javac， java -version （java 和 -version 之间有空格）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32&gt;javac</span><br><span class="line">&#x27;javac&#x27; 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line">C:\Windows\System32&gt;java -version</span><br><span class="line">&#x27;java&#x27; 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure>



<h3 id="二、方法-步骤"><a href="#二、方法-步骤" class="headerlink" title="二、方法/步骤"></a>二、方法/步骤</h3><span id="more"></span>
<h4 id="1-安装JDK，JRE，-选择安装目录"><a href="#1-安装JDK，JRE，-选择安装目录" class="headerlink" title="1. 安装JDK，JRE， 选择安装目录"></a>1. 安装JDK，JRE， 选择安装目录</h4><p>安装过程中会出现两次 安装提示 。第一次是安装 jdk ，第二次是安装 jre 。建议两个都安装在同一个java文件夹中的不同文件夹中。（不能都安装在java文件夹的根目录下，jdk和jre安装在同一文件夹会出错）。</p>
<p>（1）双击jdk-8u202-windows-x64.exe 进行安装。</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-1.png"></p>
<p>（2）点击“下一步”继续。</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-2.png"></p>
<p>（3）选择安装路径，然后点击下一步。</p>
<p>默认是在C盘。我这里选择的是E盘。路径为：E:\Java\jdk1.8.0_202\</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-3.png"></p>
<p>（4）中途会进行JRE的安装。选择JRE安装的路径，点击下一步。默认会选择C盘。</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-4.png"> </p>
<p>因为在选择的时候不能新建。自己新建一个文件夹：jre1.8.0_202文件夹。更改路径：E:\Java\jre1.8.0_202\</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-5.png"> </p>
<p>（5）点击下一步，等待安装完成。</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-6.png"> </p>
<p>（6）安装完成，点击关闭。</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-7.png"></p>
<h4 id="2-配置系统环境"><a href="#2-配置系统环境" class="headerlink" title="2.配置系统环境"></a>2.配置系统环境</h4><p>配置环境变量：右击“我的电脑”–&gt;”属性”–&gt;”高级系统设置”–&gt;”环境变量”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CLASSPATH</span><br><span class="line">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</span><br><span class="line"></span><br><span class="line">JAVA_HOME</span><br><span class="line">E:\Java\jdk1.8.0_202</span><br><span class="line"></span><br><span class="line">PATH</span><br><span class="line">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure>

<p><strong>（1）JAVA_HOME环境变量。</strong></p>
<p>作用：它指向jdk的安装目录，Eclipse/NetBeans/Tomcat等软件就是通过搜索JAVA_HOME变量来找到并使用安装好的jdk。<br>配置方法：在系统变量里点击新建，变量名填写JAVA_HOME，变量值填写JDK的安装路径。（根据自己的安装路径填写）</p>
<p>JAVA_HOME：E:\Java\jdk1.8.0_202</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-8.png"></p>
<p><strong>（2）CLASSPATH环境变量。</strong></p>
<p>作用：是指定类搜索路径，要使用已经编写好的类，前提当然是能够找到它们了，JVM就是通过CLASSPTH来寻找类的。我们需要把jdk安装目录下的lib子目录中的dt.jar和tools.jar设置到CLASSPATH中，当然，当前目录“.”也必须加入到该变量中。<br>配置方法：<br>新建CLASSPATH变量，变量值为：.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar 。CLASSPATH变量名字，可以大写也可以小写。注意不要忘记前面的点和中间的分号。且要在英文输入的状态下的分号和逗号。</p>
<p>CLASSPATH ：.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-9.png"> </p>
<p><strong>（3）path环境变量</strong></p>
<p>作用：指定命令搜索路径，在i命令行下面执行命令如javac编译java程序时，它会到PATH变量所指定的路径中查找看是否能找到相应的命令程序。我们需要把jdk安装目录下的bin目录增加到现有的PATH变量中，bin目录中包含经常要用到的可执行文件如javac/java/javadoc等待，设置好PATH变量后，就可以在任何目录下执行javac/java等工具了。</p>
<p>在系统变量里找到Path变量，这是系统自带的，不用新建。双击Path，由于原来的变量值已经存在，故应在已有的<strong>变量前追加</strong>上“;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin”。注意前面的分号。</p>
<p>Path：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-10.png"> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-11.png"> </p>
<p>或者：</p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-12.png"> </p>
<p>然后点击确定完成。</p>
<h3 id="三、-测试环境。"><a href="#三、-测试环境。" class="headerlink" title="三、 测试环境。"></a>三、 测试环境。</h3><p>检验是否配置成功 ctrl+R 运行cmd 分别输入<code>java</code>，<code>javac</code>， <code>java -version</code>。</p>
<p><strong>1.Java</strong></p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-13.png"> </p>
<p><strong>2.Javac</strong></p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-14.png"></p>
<p><strong>3.java –version</strong></p>
<p> <img src="/2021/11/17/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/image-15.png"> </p>
<p>若如图所示 显示版本信息 则说明安装和配置成功!</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>什么是尾递归</title>
    <url>/2021/11/19/%E4%BB%80%E4%B9%88%E6%98%AF%E5%B0%BE%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><h4 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h4><p>​    如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且<strong>它的返回值不属于表达式的一部分</strong>时，这个递归调用就是尾递归。尾递归函数的特点是在<strong>回归过程中不用做任何操作</strong>，这个特性很重要，因为大多数现代的编译器会利用这种特点自动生成优化的代码。</p>
<span id="more"></span>

<h4 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h4><p>以递归的形式计算阶乘：</p>
<p>线性递归:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">Rescuvie</span><span class="params">( <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n == <span class="number">1</span>) ? <span class="number">1</span> : n * Rescuvie(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尾递归:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">TailRescuvie</span><span class="params">( <span class="keyword">long</span> n, <span class="keyword">long</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n == <span class="number">1</span>) ? a : TailRescuvie(n - <span class="number">1</span>, a * n); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">TailRescuvie</span><span class="params">( <span class="keyword">long</span> n)</span> </span>&#123;<span class="comment">//封装用的</span></span><br><span class="line">    <span class="keyword">return</span> (n == <span class="number">0</span>) ? <span class="number">1</span> : TailRescuvie(n, <span class="number">1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当n = 5时<br>对于传统线性递归, 他的递归过程如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rescuvie(5)</span><br><span class="line"></span><br><span class="line">&#123;5 * Rescuvie(4)&#125;</span><br><span class="line"></span><br><span class="line">&#123;5 * &#123;4 * Rescuvie(3)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;5 * &#123;4 * &#123;3 * Rescuvie(2)&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;5 * &#123;4 * &#123;3 * &#123;2 * Rescuvie(1)&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;5 * &#123;4 * &#123;3 * &#123;2 * 1&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;5 * &#123;4 * &#123;3 * 2&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;5 * &#123;4 * 6&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;5 * 24&#125;</span><br><span class="line"></span><br><span class="line">120</span><br></pre></td></tr></table></figure>

<p>对于尾递归, 他的递归过程如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TailRescuvie(5)                  // 所以在运算上和内存占用上节省了很多,直接传回结果</span><br><span class="line"></span><br><span class="line">TailRescuvie(5, 1)                         return 120</span><br><span class="line">                                                 ↑</span><br><span class="line">TailRescuvie(4, 5)                         return 120</span><br><span class="line">                                                 ↑</span><br><span class="line">TailRescuvie(3, 20)                        return 120</span><br><span class="line">                                                 ↑</span><br><span class="line">TailRescuvie(2, 60)                        return 120</span><br><span class="line">                                                 ↑</span><br><span class="line">TailRescuvie(1, 120)                       return 120</span><br><span class="line">                                                 ↑</span><br><span class="line">120                                //当运行到最后时,return a =&gt; return 120 ,将120返回上一级</span><br></pre></td></tr></table></figure>

<p>说明：其实尾递归也需要下层往上层返回结果，但在返回的过程中不用再做计算，依次返回结果即可。从上可以看到尾递归把返回结果放到了调用的参数里。这个细小的变化导致，TailRescuvie(n)不必像以前一样，非要等到拿到了TailRescuvie(n-1)的返回值，才能计算它自己的返回结果,它完全就等于TailRescuvie(n-1)的返回值。因此理论上：TailRescuvie(n)在调用tailTailRescuvie(n-1)前，完全就可以先销毁自己放在栈上的东西。</p>
<h4 id="三、优势"><a href="#三、优势" class="headerlink" title="三、优势"></a>三、优势</h4><p>​    与普通递归相比，由于尾递归的调用处于方法的最后，因此方法之前所积累下的各种状态对于递归调用结果已经没有任何意义，因此每一个函数在调用下一个函数之前，都能做到先把当前自己占用的栈给先释放了，尾递归的调用链上可以做到只有一个函数在使用栈，因此可以无限地调用！</p>
<p>​    但是，上述的优化是在<strong>某些语言</strong>编译器的优化支持上实现的，尾递归本身并不能消除函数调用栈过长的问题。在一般递归函数func()中，func(n)是依赖于 func(n-1) 的，func(n) 只有在得到 func(n-1) 的结果之后，才能计算它自己的返回值，因此理论上，在 func(n-1) 返回之前，func(n)，不能结束返回。因此func(n)就必须保留它在栈上的数据，直到func(n-1)先返回，而尾递归的实现则可以在编译器的帮助下，消除这个限制。</p>
<h4 id="四、尾递归的调用栈优化特性"><a href="#四、尾递归的调用栈优化特性" class="headerlink" title="四、尾递归的调用栈优化特性"></a>四、尾递归的调用栈优化特性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int tail_func(int n, int res)&#123;</span><br><span class="line">     if (n &lt;= 1) return res;</span><br><span class="line">     return tail_func(n - 1, n * res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int dummy[1024*1024]; // 尽可能占用栈。</span><br><span class="line">    tail_func(2048*2048, 1);</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    上面这个程序在开了编译优化和没开编译优化的情况下编出来的结果是<strong>不一样</strong>的，如果不开启优化，直接 <code>gcc -o tr func_tail.c</code> 编译然后运行的话，程序会爆栈崩溃，但如果开优化的话：<code>gcc -o tr -O2 func_tail.c</code>，上面的程序最后就能正常运行。 这里面的原因就在于，尾递归的写法只是具备了使当前函数在调用下一个函数前把当前占有的栈销毁，但是会不会真的这样做，是要具体看编译器是否最终这样做，如果在语言层面上，没有规定要优化这种尾调用，那编译器就可以有自己的选择来做不同的实现，在这种情况下，尾递归就不一定能解决一般递归的问题。</p>
<p>参考链接:</p>
<p><a href="https://blog.csdn.net/h330531987/article/details/76218956">什么是尾递归,尾递归的优势以及语言支持情况说明</a></p>
<p><a href="https://www.cnblogs.com/catch/p/3495450.html">说说尾递归</a></p>
]]></content>
  </entry>
  <entry>
    <title>将Hexo部署到GitHub</title>
    <url>/2021/10/24/%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0GitHub/</url>
    <content><![CDATA[<p>参考<a href="https://hexo.io/zh-cn/docs">Hexo文档</a> </p>
<span id="more"></span>

<h2 id="一、安装Git"><a href="#一、安装Git" class="headerlink" title="一、安装Git"></a>一、安装Git</h2><ol>
<li><p><a href="https://gitforwindows.org/">gitforwindows</a> 下载安装</p>
</li>
<li><p>安装完查看git版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="二、安装Node-js"><a href="#二、安装Node-js" class="headerlink" title="二、安装Node.js"></a>二、安装Node.js</h2><ol>
<li><p><a href="https://nodejs.org/en/download/">node.js</a> 选择LTS的window版本，下载安装</p>
</li>
<li><p>安装完查看node.js版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li>
<li><p>更改npm镜像源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></li>
<li><p>查看npm镜像源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm get registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><ol>
<li><p>安装Hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="四、建站"><a href="#四、建站" class="headerlink" title="四、建站"></a>四、建站</h2><ol>
<li><p>初始化博客目录</p>
<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li><p>常用命令：</p>
<ul>
<li>清理缓存： <code>hexo clean</code></li>
<li>生成静态文件： <code>hexo g/generate</code></li>
<li>生成静态文件： <code>hexo s/server</code></li>
<li>组合版：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></li>
<li>发布到github：<code>hexo d</code></li>
</ul>
<p>本地访问地址：<a href="http://localhost:4000/">http://localhost:4000</a></p>
</li>
<li><p>修改网站基本配置信息参考<a href="https://hexo.io/zh-cn/docs/configuration">配置</a></p>
</li>
</ol>
<h2 id="五、将hexo部署到GitHub"><a href="#五、将hexo部署到GitHub" class="headerlink" title="五、将hexo部署到GitHub"></a>五、将hexo部署到GitHub</h2><ol>
<li><p>生成SSH添加到GitHub</p>
<p>生成key，可以git部署网站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>然后需要配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email “you@example.com”</span><br><span class="line">git config --global user.name “Your Name”</span><br></pre></td></tr></table></figure>

<p>将这个文件拷贝到git的<a href="https://github.com/settings/keys">https://github.com/settings/keys</a><br>查看是否配置成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li>
<li><p>GitHub创建个人仓库<br>新建一个 repository。如果你希望你的站点能通过域名 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 访问，你的 repository 应该直接命名为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>。</p>
</li>
<li><p>安装 hexo-deployer-git.：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><p>在 _config.yml（如果有已存在的请删除）添加如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">    type: git  </span><br><span class="line">    repo: https://github.com/&lt;username&gt;/&lt;project&gt; </span><br></pre></td></tr></table></figure></li>
<li><p>运行 hexo </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></li>
<li><p>查看 <code>username.github.io</code> 上的网页是否部署成功。</p>
</li>
</ol>
<h2 id="六、发布文章"><a href="#六、发布文章" class="headerlink" title="六、发布文章"></a>六、发布文章</h2><ol>
<li><p>创建文章</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;title&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>然后用编辑器修改好文本，发布</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Linux快速整理</title>
    <url>/2021/11/08/Linux%E5%BF%AB%E9%80%9F%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>环境搭建:</p>
<p>vmware虚拟机+XShell登录虚拟机</p>
<p>Linux快速整理：</p>
<ol>
<li><p><code>[root@hadoop001 ~]</code>表示[登录的用户@机器名称 <del>]，“</del>”表示家目录</p>
</li>
<li><p><code>pwd</code>查看当前所在目录路径地址</p>
<p>有时候2个文件夹同名可能会搞错，需要要查看目录</p>
<span id="more"></span></li>
<li><p>切换目录 <code>cd</code></p>
<p>root用户的家目录：/root</p>
<p>xxx用户的家目录：/home/xxx 默认</p>
<p>家目录的修改：vi /etc/passwd 默认不修改</p>
<p>什么情况会修改？部署mysql时，修改mysqladmin的家目录为/usr/local/mysql，方便操作与规范。行业里比较标准的事情</p>
<p><code>cd 回车</code>  /  <code>cd ~ </code>  / <code>cd /root</code> 回到家目录</p>
<p><code>cd -</code>回到上一次访问的目录</p>
<p><code>cd ../</code> 回退上一层目录</p>
<p><code>cd ../../</code> 回退上两层目录</p>
</li>
<li><p>目录 文件夹</p>
<p><strong>绝对路径</strong>：“/”代表根目录，以根目录开始表示</p>
<p>​                    写shell脚本时，路径要用绝对路径。</p>
<p><strong>相对路径</strong>：不以根目录为开始，以当前光标所在目录（pwd结果）为开始表示</p>
<p>查看当前文件夹下的内容 <code>ls</code></p>
</li>
<li><p>清空屏幕 <code>clear</code></p>
</li>
<li><p>ls查看当前光标所在的目录 文件有哪些</p>
<p><code>ls -l</code>  等价于`ll``</p>
<p>``ls -l -a` 查看当前的文件文件夹+ 隐藏文件、文件夹（以.开头）</p>
<p><code>ll -h</code> 显示文件的大小</p>
<p><code>ll -rt</code> 按时间排序</p>
</li>
<li><p>查询命令帮助 <code>--help</code> /<code>man</code></p>
</li>
<li><p>创建文件夹 <code>mkdir</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>
</ul>
<p>例如 </p>
<p><code>mkdir -p a/b/c/d</code>递归创建多层目录</p>
<p><code>mkdir a b c d</code>在当前文件夹下创建4个文件夹</p>
<p>删除空的目录：<code>rmdir</code></p>
<p>选项与参数：</p>
<ul>
<li><strong>-p ：</strong>从该目录起，一次删除多级空目录</li>
</ul>
</li>
<li><p>复制文件或目录： <code>cp [-adfilprsu] source destination</code></p>
<p>移动文件与目录，或修改名称： <code>mv [-fiu] source destination</code></p>
<p>移除文件或目录： <code>rm [-fir] 文件或目录</code></p>
<p><strong>思考：mv和cp哪个执行快？</strong></p>
<ul>
<li>同一个文件系统（在同一个分区）内，mv的速度是瞬间的，因为它所有需要的是重命名的目录的文件路径。除了目录条目之外，没有必要更改任何数据。</li>
<li>在文件系统之间移动目录将涉及将数据复制到目标并将其从源中删除。这将与在单个文件系统中复制（复制）数据一样长的时间。</li>
<li>都可修改名称。</li>
</ul>
</li>
<li><p>如何创建一个空文件 或者把一个文件设置为空</p>
<ul>
<li><p>touch rz.log 如何创建一个空文件</p>
<p><code>touch</code>命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p>
</li>
<li><p>echo “” &gt; rz.log1 慎用(不是真正的空，会有1字节的大小)</p>
</li>
<li><p>cat /dev/null &gt; ruoze.log20191113  把一个文件设置为空</p>
</li>
</ul>
</li>
<li><p>查看文件内容</p>
<ul>
<li><p><code>cat</code>命令用于连接文件并打印到标准输出设备上。</p>
<p>-n 或 –number：由 1 开始对所有输出的行数编号。</p>
</li>
<li><p><code>more</code> 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读</p>
<p>空白键（space）- 往下一页显示</p>
<p>b  - 往回（back）一页显示</p>
<p>q  - 退出more</p>
</li>
<li><p><code>less</code> 与 more 类似，less 可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页</p>
<p>/字符串：向下搜索”字符串”的功能</p>
<p>?字符串：向上搜索”字符串”的功能</p>
<p>n：重复前一个搜索（与 / 或 ? 有关）</p>
<p>N：反向重复前一个搜索（与 / 或 ? 有关）</p>
<p>G ：移动到最后一行</p>
<p>g：移动到第一行</p>
<p>q / ZZ ：-退出 less 命令</p>
</li>
</ul>
<p><strong>配置文件，内容较少，可用以上上个命令</strong></p>
<p><strong>log日志，内容较多，用tail命令</strong></p>
<ul>
<li><p><code>tail</code> 可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p>
<p>实时查看</p>
<p><code>tail -f filename</code> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p>
<p><code>tail -F filename</code>等于-f + retry，即使文件丢失后再创建也会更新</p>
<p>补充：flume exec source 切记使用 -F</p>
<p>-n&lt;行数&gt; 显示文件的尾部 n 行内容</p>
<p>-c&lt;数目&gt; 显示的字节数</p>
<p><code>tail -n -5 /test001/text001</code> 与 <code>tail -n 5 /test001/text001</code> 显示的结果相同，均是文件末尾最后 5 行内容。<br><code>tail -n +5 /test001/text001</code> 显示的内容为从第 5 行开始，直到末尾的内容。tail -n 后面的数字有效输入只有单个数字（5）或者加号连接数字（+5）两种。</p>
<p>tail -300f messages 实时查看倒数300行文件<br>tail -300F messages 不能这样写，即不能写成数字+F<br>tail: option used in invalid context – 3</p>
</li>
</ul>
</li>
<li><p>文件上传下载工具</p>
<p>安装： <code>yum install -y lrzsz</code></p>
<p>文件下载到windows：<code>sz</code></p>
<p>windows上传到linux: <code>rz</code></p>
</li>
<li><p>如何定位ERROR</p>
<ul>
<li><p>文件内容很小，几十兆</p>
<p>先下载到windows上，用编辑器打开搜索关键字定位ERROR</p>
</li>
<li><p>文件内容很大，几百兆 2G</p>
<p>cat xxx.log | grep ERROR</p>
<p>| 是管道符，管道符前面的命令结果作为管道符后面命令的输入，grep是过滤命令</p>
</li>
</ul>
</li>
<li><p>grep命令</p>
<p><code>grep</code> 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 **-**，则 grep 指令会从标准输入设备读取数据。</p>
<p>-A&lt;显示行数&gt; 或 –after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</p>
<p>-B&lt;显示行数&gt; 或 –before-context=&lt;显示行数&gt;: 除了显示符合样式的那一行之外，并显示该行之前的内容。</p>
<p>-C&lt;显示行数&gt; 或 –context=&lt;显示行数&gt;或-&lt;显示行数&gt;: 除了显示符合样式的那一行之外，并显示该行之前后的内容。</p>
<p>cat xxx.log | grep -A 10 ERROR 后10行<br>cat xxx.log | grep -B 10 ERROR 前10行<br>cat xxx.log | grep -C 30 ERROR 前后各30行  经常用  迅速定位ERROR上下文</p>
<p>cat xxx.log | grep -C 30 ERROR &gt; error.log 新建/覆盖<br>cat xxx.log | grep -C 30 ERROR &gt;&gt; error.log 追加</p>
</li>
<li><p>环境变量$PATH</p>
<p>打印环境变量：<code>echo $PATH</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 ~]# echo $PATH</span><br><span class="line">/usr/local/mysql/bin:/usr/java/jdk1.7.0_80/bin:/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure>

<p><code>which</code>命令：依次在环境变量$PATH中以冒号分割，查找目录下是否有要查找的命令目录，返回第一个查找到的目录地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 ~]# which ls</span><br><span class="line">alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">	/bin/ls</span><br></pre></td></tr></table></figure>

<p>全局环境变量: /etc/profile    所有人都使用<br>个人环境变量: ~/.bash_profile  </p>
<pre><code>                      ~/.bashrc       个人 不给其他人
</code></pre>
<p>注意：配置个人环境变量文件**.bashrc** 优先。当用ssh远程登录时，**.bashrc** 会自动生效， <strong>.bash_profile</strong>则不会，bug。</p>
<p>生效文件: <code>source xxxx</code></p>
<pre><code>              `. ~/.bashrc`
</code></pre>
<p>（补充：安装unzip命令 ：<code>yum install -y unzip</code> 解压：<code>tar -xzvf xxxx.tar.gz</code>）</p>
<p>配置环境变量:<code>vi /etc/profile</code></p>
<p>环境变量是指的什么<br>K=V  等号前后不能有空格<br>使用环境变量K时用$符号，如： $K</p>
<p>export JAVA_HOME=usr/java/jdk1.8.0_121</p>
<p>export PATH=$JAVA_HOME/bin:$PATH</p>
<p>新配置的变量在前面追加</p>
<p>a. 上下键 移动光标<br>b. 按 i键insert 进入 <strong>编辑模式</strong><br>c. 开始编辑<br>d. 按 esc键退出 编辑模式，进入<strong>命令行模式</strong><br>e. 按 ：（shift+；）键，进入<strong>尾行模式</strong><br>f. 输入 wq 保存退出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ruozedata001 java]# source /etc/profile</span><br><span class="line">[root@ruozedata001 java]# echo $PATH</span><br><span class="line">/usr/java/jdk1.8.0_121/bin:/usr/java/jdk1.8.0_12/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">[root@ruozedata001 java]# which java</span><br><span class="line">/usr/java/jdk1.8.0_121/bin/java</span><br><span class="line">[root@ruozedata001 java]# </span><br></pre></td></tr></table></figure>

<p>小结:<br>1.command not found<br>没有部署安装包，部署了没有配置环境变量<br>2.习惯<br>当我们以后部署一个软件，bin目录的可执行文件 比如java<br>习惯 当生效环境变量文件，习惯做 which java</p>
</li>
<li><p>别名alias</p>
<p><code>alias</code> 命令用于设置指令的别名。</p>
<p>用户可利用alias，自定指令的别名。若仅输入alias，则可列出目前所有的别名设置。alias的效力仅及于该次登入的操作。若要每次登入是即自动设好别名，可在.profile或.bashrc中设定指令的别名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias[别名]=[指令名称]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 ~]# alias</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias l.=&#x27;ls -d .* --color=auto&#x27;</span><br><span class="line">alias ll=&#x27;ls -l --color=auto&#x27;</span><br><span class="line">alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias which=&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&#x27;</span><br></pre></td></tr></table></figure>

<p>配置个人环境变量文件**.bashrc** 优先。当用ssh远程登录时，**.bashrc** 会自动生效， <strong>.bash_profile</strong>则不会，bug。</p>
</li>
<li><p>查看历史命令history</p>
<p>当前命令输入状态下：</p>
<pre><code>* 可以按一下**上＼下方向键**，命令行就会显示相对于当前命令的上一条或下一条历史记录．

*  和方向键相同功能的就是组合键**Ctrl+ p** （前面执行过的命令）,**Ctrl +n**（后面执行过的命令）
</code></pre>
<ul>
<li><p>上面两个都是相对于当前命令查询上一条或者下一条命令的历史记录．如果搜索命令历史记录，就用<strong>Ctrl+ r</strong> 组合键进入历史记录搜寻状态，然后，键盘每按一个字母，当前命令行就会搜索出命令历史记录．使用Ctrl+r反向查询历史命令，将匹配的最新一条显示出来</p>
<p>如果还想继续向上查询，继续按<strong>Ctrl+r</strong>。</p>
</li>
</ul>
<p><code>history [n]</code>  n为数字，列出最近的n条命令</p>
<p><code>history -c</code>  将目前shell中的所有history命令消除</p>
<p>使用! 执行历史命令。</p>
<pre><code>* `!  [n]`  n为数字 执行第n条命令
</code></pre>
<ul>
<li><code>! command</code> 从最近的命令查到以command开头的命令执行</li>
<li><code>!!</code> 执行上一条</li>
</ul>
<p>当同一账号，同时登录多个bash时，只有最后一个退出的会写入bash_history,其他的都被覆盖了。</p>
<p>历史命令文件记录在 ~/.bash_history中,要清空历史记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /dev/null &gt;  ~/.bash_history</span><br><span class="line">history -c </span><br></pre></td></tr></table></figure>

<p>拓展：</p>
<p>当刚进公司进入服务器，第一步应该用history 看看这个账号之前做过哪些操作，有可能发现password</p>
</li>
<li><p>删除<br>生成新文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch xxx.log </span><br><span class="line">cat /dev/null &gt; xxx.log //把文件置空</span><br><span class="line">vi xxx.log</span><br></pre></td></tr></table></figure>

<p>创建文件夹: <code>mkdir</code> </p>
<p> <code>rm</code>（英文全拼：remove）命令用于删除一个文件或者目录。</p>
<ul>
<li><p>-i 删除前逐一询问确认。</p>
</li>
<li><p>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</p>
</li>
<li><p>-r 将目录及以下之档案亦逐一删除。</p>
<p>删除文件可以直接使用rm命令，若删除目录则必须配合选项”-r”，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rm  test.txt </span><br><span class="line">rm：是否删除 一般文件 &quot;test.txt&quot;? y  </span><br><span class="line"># rm  homework  </span><br><span class="line">rm: 无法删除目录&quot;homework&quot;: 是一个目录  </span><br><span class="line"># rm  -r  homework  </span><br><span class="line">rm：是否删除 目录 &quot;homework&quot;? y </span><br></pre></td></tr></table></figure></li>
</ul>
<p>文件一旦通过rm命令删除，则无法恢复，所以必须格外小心地使用该命令。</p>
<p><strong>风险:</strong><br>rm -rf /  高危命令<br>什么场景会发生？ shell脚本:</p>
<p>K=’/home/jepson’</p>
<p>K=’’<br>shell脚本中必须判断 $K命令是否存在<br>rm -rf $K/*</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 6]# K=&#x27;&#x27; //本应该设置K=&#x27;/home/jepson&#x27;</span><br><span class="line">[root@hadoop001 6]# echo $K/</span><br><span class="line">/</span><br><span class="line">[root@hadoop001 6]# ls $K/</span><br><span class="line">6     data  home   lost+found  mnt  proc  selinux  tmp</span><br><span class="line">bin   dev   lib    media       net  root  srv      usr</span><br><span class="line">boot  etc   lib64  misc        opt  sbin  sys      var</span><br></pre></td></tr></table></figure></li>
<li><p>用户 用户组</p>
<p>创建用户：<code>useradd username</code></p>
<p>查看用户信息：<code>id username</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 ~]# id ruoze</span><br><span class="line">//uid=501(ruoze) gid=501(ruoze) groups=501(ruoze) 默认值</span><br><span class="line">uid=501(ruoze) gid=502(bigdata) groups=502(bigdata),501(ruoze)</span><br></pre></td></tr></table></figure>

<p>创建一个普通用户，默认创建这个名称的用户组ruoze,<br>且设置这个用户 主组为ruoze，且创建/home/ruoze</p>
<p>查看机器上的用户：<code>cat /etc/passwd</code><br>查看机器上的用户组：<code>cat /etc/group</code></p>
<p>删除用户:<code>userdel username</code></p>
<p>删除用户后，/etc/passwd内会删除用户信息，但是用户home文件夹依然存在。如果组内只有一个成员，成员被删除后，组会自动删除。</p>
<p>模拟切换用户丢失样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ruozedata001 ruoze]# ll -a</span><br><span class="line">total 12</span><br><span class="line">drwx------  2 ruoze ruoze  59 Nov 16 21:16 .</span><br><span class="line">drwxr-xr-x. 5 root  root   44 Nov 16 21:16 ..</span><br><span class="line">-rw-r--r--  1 ruoze ruoze  18 Apr 11  2018 .bash_logout</span><br><span class="line">-rw-r--r--  1 ruoze ruoze 193 Apr 11  2018 .bash_profile</span><br><span class="line">-rw-r--r--  1 ruoze ruoze 231 Apr 11  2018 .bashrc</span><br><span class="line">[root@ruozedata001 ruoze]# rm -rf .bash*</span><br><span class="line"></span><br><span class="line">[root@ruozedata001 ~]# su  - ruoze</span><br><span class="line">Last login: Sat Nov 16 21:29:09 CST 2019 on pts/1</span><br><span class="line">-bash-4.2$ </span><br><span class="line">-bash-4.2$ </span><br></pre></td></tr></table></figure>

<p>修正样式（从/etc/skel上把隐藏文件复制到用户home目录下即可）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ruozedata001 ruoze]# cp /etc/skel/.* /home/ruoze/</span><br><span class="line">cp: omitting directory ‘/etc/skel/.’</span><br><span class="line">cp: omitting directory ‘/etc/skel/..’</span><br><span class="line">[root@ruozedata001 ruoze]# ll -a</span><br><span class="line">total 12</span><br><span class="line">drwx------  2 ruoze ruoze  59 Nov 16 21:32 .</span><br><span class="line">drwxr-xr-x. 5 root  root   44 Nov 16 21:16 ..</span><br><span class="line">-rw-r--r--  1 root  root   18 Nov 16 21:32 .bash_logout</span><br><span class="line">-rw-r--r--  1 root  root  193 Nov 16 21:32 .bash_profile</span><br><span class="line">-rw-r--r--  1 root  root  231 Nov 16 21:32 .bashrc</span><br><span class="line">[root@ruozedata001 ruoze]# chown ruoze:ruoze .bash*</span><br><span class="line"></span><br><span class="line">[root@ruozedata001 ruoze]# ll -a</span><br><span class="line">total 12</span><br><span class="line">drwx------  2 ruoze ruoze  59 Nov 16 21:32 .</span><br><span class="line">drwxr-xr-x. 5 root  root   44 Nov 16 21:16 ..</span><br><span class="line">-rw-r--r--  1 ruoze ruoze  18 Nov 16 21:32 .bash_logout</span><br><span class="line">-rw-r--r--  1 ruoze ruoze 193 Nov 16 21:32 .bash_profile</span><br><span class="line">-rw-r--r--  1 ruoze ruoze 231 Nov 16 21:32 .bashrc</span><br><span class="line">[root@ruozedata001 ruoze]# </span><br><span class="line">[root@ruozedata001 ~]# su - ruoze</span><br><span class="line">Last login: Sat Nov 16 21:30:23 CST 2019 on pts/2</span><br><span class="line">[ruoze@ruozedata001 ~]$ </span><br></pre></td></tr></table></figure>

<p>创建用户组：<code>groupadd groupname</code></p>
<p>把用户添加到用户组：<code>usermod -a -G bigdata ruoze</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod	-g, --gid GROUP               force use GROUP as new primary group</span><br><span class="line">		-G, --groups GROUPS           new list of supplementary GROUPS</span><br><span class="line">		-a, --append                  append the user to the supplemental GROUPS</span><br></pre></td></tr></table></figure>

<p>给用户设置密码：<code>passwd username</code>，passwd后不加参数，就是设置当前用户的密码</p>
<p>切换用户：<code>su</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su username</span><br><span class="line">su - username</span><br></pre></td></tr></table></figure>

<p>加”-“会把当前目录切换到用户的家目录，且执行环境变量文件（.bash_profile和.bashrc都执行）</p>
<p>不加“-”，目录不切换，.bashrc中的配置执行，.bash_profile中的配置不执行。所以配置最好写在.bashrc上。</p>
<p>用户权限问题：connection连接拒绝、Permission denied</p>
<p>普通用户获取root的最大权限<code>vi /etc/sudoers</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Allow root to run any commands anywhere </span><br><span class="line">username   ALL=(root)      NOPASSWD:ALL</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ruoze@ruozedata001 root]$ ls -l</span><br><span class="line">ls: cannot open directory .: Permission denied</span><br><span class="line">[ruoze@ruozedata001 root]$ cat rz.log</span><br><span class="line">cat: rz.log: Permission denied</span><br><span class="line">[ruoze@ruozedata001 root]$ sudo cat rz.log</span><br><span class="line">www.ruozedata.com</span><br></pre></td></tr></table></figure>

<p>/etc/passwd:</p>
<p>设置为：ruoze:\x:1002:1003::/home/ruoze:/bin/false，然后su切换失败</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ruozedata001 ~]# su - ruoze</span><br><span class="line">Last login: Sat Nov 16 21:57:32 CST 2019 on pts/0</span><br><span class="line">[root@ruozedata001 ~]# </span><br></pre></td></tr></table></figure>

<p>设置为：ruoze:\x:1002:1003::/home/ruoze:/sbin/nologin,然后不允许登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ruozedata001 ~]# su - ruoze</span><br><span class="line">Last login: Sat Nov 16 22:08:52 CST 2019 on pts/0</span><br><span class="line">This account is currently not available.</span><br><span class="line">[root@ruozedata001 ~]# </span><br></pre></td></tr></table></figure>

<p>所以以后在CDH中遇到切换用户失败，到/etc/passwd中对应修改为 /bin/bash</p>
</li>
<li><p>权限：chown chmod</p>
<p>错误: Permission denied（permission denied一般用chmod修改文件权限就可，chown不必要）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 777 文件夹/文件路径</span><br><span class="line">chown -R 用户:用户组 文件夹/文件路径</span><br><span class="line">-R, --recursive        operate on files and directories recursively</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ruozedata001 ~]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 2 root root  6 Nov 16 22:15 ruozedata</span><br><span class="line">-rw-r--r-- 1 root root 18 Nov 16 21:58 rz.log</span><br></pre></td></tr></table></figure>

<p>第一个字符：d:文件夹；-：文件；l：连接；</p>
<p>r: read  4<br>w: write 2<br>x: 执行  1<br>-: 没权限 0</p>
<p>rwx 第一组 7 代表文件或文件夹的用户root，读写执行<br>r-x 第二组 5 代表文件或文件夹的用户组root，读执行<br>r-x 第三组 5 代表其他组的所属用户对这个文件或文件夹的权限: 读执行</p>
</li>
<li><p>查看大小</p>
<p>文件：</p>
<ul>
<li>ll</li>
<li>du -sh </li>
</ul>
<p>文件夹：</p>
<ul>
<li>du -sh</li>
<li>用ll看到的并不是文件夹大小</li>
</ul>
</li>
<li><p>删除执行中的程序或工作:<code>kill</code></p>
<p><code>kill</code> 可将指定的信息送至程序。预设的信息为 SIGTERM(15)，可将指定程序终止。</p>
<p>若仍无法终止该程序，可使用 SIGKILL(9) 信息尝试强制删除程序。程序或工作的编号(pid)可利用 ps 指令或 jobs 指令查看。</p>
<p>root用户将影响用户的进程，非root用户只能影响自己的进程。</p>
<p>使用 <code>kill -l</code> 命令列出所有可用信号。最常用的信号是：</p>
<ul>
<li>1 (HUP)：重新加载进程。</li>
<li>2（INT）：中断（同 Ctrl + C）</li>
<li>3（QUIT）：退出（同 Ctrl + \）</li>
<li>9 (KILL)：强制杀死一个进程。</li>
<li>15 (TERM)：正常停止一个进程。</li>
</ul>
<p>杀死进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kill pid</span><br></pre></td></tr></table></figure>

<p>强制杀死进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kill -KILL pid</span><br><span class="line"># kill -9 pid</span><br></pre></td></tr></table></figure>

<p>发送SIGHUP信号，可以使用一下信号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kill -HUP pid</span><br></pre></td></tr></table></figure>

<p>杀死指定用户所有进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#kill -9 $(ps -ef | grep hnlinux) //方法一 过滤出hnlinux用户进程 </span><br><span class="line">#kill -u hnlinux //方法二</span><br></pre></td></tr></table></figure>

<p><strong>扩展：kill pid与kill -9 pid的区别</strong></p>
<p><code>kill pid</code>的作用是向进程号为pid的进程发送SIGTERM（这是kill默认发送的信号），该信号是一个结束进程的信号且可以被应用程序捕获。若应用程序没有捕获并响应该信号的逻辑代码，则该信号的默认动作是kill掉进程。这是终止指定进程的推荐做法。</p>
<p> <code>kill -9 pid</code>则是向进程号为pid的进程发送SIGKILL（该信号的编号为9），SIGKILL既不能被应用程序捕获，也不能被阻塞或忽略，其动作是立即结束指定进程。通俗地说，应用程序根本无法“感知”SIGKILL信号，它在完全无准备的情况下，就被收到SIGKILL信号的操作系统给干掉了，显然，在这种“暴力”情况下，应用程序完全没有释放当前占用资源(善后：关闭socket链接、清理临时文件、将自己将要被销毁的消息通知给子进程、重置自己的终止状态)的机会。事实上，SIGKILL信号是直接发给init进程的，它收到该信号后，负责终止pid指定的进程。在某些情况下（如进程已经hang死，无法响应正常信号），就可以使用kill -9来结束进程。</p>
<p><strong>注意：</strong>kill生产上不能随意杀进程，确认是自己服务不影响其他不丢数据，在杀死前周知运维、部门。发送信号时必须小心，只有在万不得已时，才用kill信号(9)，因为进程不能首先捕获它。</p>
</li>
<li><p>其他命令</p>
<ul>
<li><p>搜索 <code>find</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#find   path   -option   [   -print ]   [ -exec   -ok   command ]   &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>将当前目录及其子目录下所有文件后缀为 <strong>.c</strong> 的文件列出来:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#find . -name &quot;*.c&quot;</span><br></pre></td></tr></table></figure>

<p>将当前目录及其子目录中的所有文件列出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#find . -type f</span><br></pre></td></tr></table></figure>

<p>将当前目录及其子目录下所有最近 20 天内更新过的文件列出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#find . -ctime -20</span><br></pre></td></tr></table></figure></li>
<li><p>查看进程：<code>ps -ef</code> </p>
</li>
<li><p>系统情况：<code>top</code>（load average: 0，0，0反映繁忙不繁忙。超过十就很高。）</p>
</li>
<li><p>查看ip通不通：ping ip地址</p>
</li>
<li><p>测试端口号连通性：telnet ip地址 端口号</p>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>在Linux系统上部署Mysql</title>
    <url>/2021/11/24/Mysql%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="在Linux系统上部署Mysql"><a href="#在Linux系统上部署Mysql" class="headerlink" title="在Linux系统上部署Mysql"></a>在Linux系统上部署Mysql</h1><p>在Linux上部署有两种方式：</p>
<ul>
<li>rpm包部署：操作简单，适合学习的场景</li>
<li>tar包部署：定制化配置，生产上一般用tar包部署</li>
</ul>
<span id="more"></span>

<h2 id="一、rpm包部署"><a href="#一、rpm包部署" class="headerlink" title="一、rpm包部署"></a>一、rpm包部署</h2><h3 id="0-查看机器上是否已经部署"><a href="#0-查看机器上是否已经部署" class="headerlink" title="0.查看机器上是否已经部署"></a>0.查看机器上是否已经部署</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# rpm -qa|grep mysql</span><br><span class="line">mysql-5.1.73-3.el6_5.x86_64</span><br><span class="line">mysql-libs-5.1.73-3.el6_5.x86_64</span><br><span class="line">mysql-server-5.1.73-3.el6_5.x86_64</span><br></pre></td></tr></table></figure>

<p>此处已经部署，先卸载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# rpm -e --nodeps mysql*</span><br></pre></td></tr></table></figure>

<h3 id="1-用yum安装"><a href="#1-用yum安装" class="headerlink" title="1.用yum安装"></a>1.用yum安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# yum search mysql</span><br><span class="line">[root@hadoop001 mysql]# yum install -y mysql-server.x86_64 mysql.x86_64</span><br></pre></td></tr></table></figure>

<p>安装完毕根据需要修改配置文件:<code>/etc/my.cnf</code></p>
<p>#不用yum安装的话，可到官网下载rpm包，然后通过命令<code>rpm -ivh rpm包</code>进行安装，大同小异</p>
<h3 id="2-启动与停止"><a href="#2-启动与停止" class="headerlink" title="2.启动与停止"></a>2.启动与停止</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# service mysqld start</span><br><span class="line">[root@hadoop001 mysql]# service mysqld stop  </span><br></pre></td></tr></table></figure>



<h2 id="二、tar包部署"><a href="#二、tar包部署" class="headerlink" title="二、tar包部署"></a>二、tar包部署</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 ~]# mysql --version</span><br><span class="line">mysql  Ver 14.14 Distrib 5.6.23, for linux-glibc2.5 (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure>

<p>我的linux系统上已经部署mysql 5.6.23版本，现在以部署mysql 5.7.11为例再部署一次。</p>
<h3 id="0-前期准备：tar包"><a href="#0-前期准备：tar包" class="headerlink" title="0.前期准备：tar包"></a>0.前期准备：tar包</h3><p>官方网站选择需要的版本下载：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p>
<p>我们这里用到的是mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz，点击下载：<a href="https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz">mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz</a></p>
<p>然后通过rz命令上传至linux系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 ~]# cd /usr/local/</span><br><span class="line">[root@hadoop001 local]# rz</span><br><span class="line">[root@hadoop001 local]# ll|grep mysql</span><br><span class="line">-rw-r--r--.  1 root       root 548193637 Nov 21 03:58 mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="1-解压及创建目录"><a href="#1-解压及创建目录" class="headerlink" title="1.解压及创建目录"></a>1.解压及创建目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 local]# tar -xzvf mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz </span><br><span class="line">[root@hadoop001 local]# ln -s mysql-5.7.11-linux-glibc2.5-x86_64 mysql</span><br><span class="line">[root@hadoop001 local]# cd mysql</span><br><span class="line">[root@hadoop001 mysql]# ll</span><br><span class="line">total 52</span><br><span class="line">drwxr-xr-x.  2 7161 wheel  4096 Feb  2  2016 bin</span><br><span class="line">-rw-r--r--.  1 7161 wheel 17987 Feb  2  2016 COPYING</span><br><span class="line">drwxr-xr-x.  2 7161 wheel  4096 Feb  2  2016 docs</span><br><span class="line">drwxr-xr-x.  3 7161 wheel  4096 Feb  2  2016 include</span><br><span class="line">drwxr-xr-x.  5 7161 wheel  4096 Feb  2  2016 lib</span><br><span class="line">drwxr-xr-x.  4 7161 wheel  4096 Feb  2  2016 man</span><br><span class="line">-rw-r--r--.  1 7161 wheel  2478 Feb  2  2016 README</span><br><span class="line">drwxr-xr-x. 28 7161 wheel  4096 Feb  2  2016 share</span><br><span class="line">drwxr-xr-x.  2 7161 wheel  4096 Feb  2  2016 support-files</span><br><span class="line">[root@hadoop001 mysql]# mkdir arch data tmp</span><br><span class="line">[root@hadoop001 mysql]# ll</span><br><span class="line">total 64</span><br><span class="line">drwxr-xr-x.  2 root root   4096 Nov 24 09:38 arch</span><br><span class="line">drwxr-xr-x.  2 7161 wheel  4096 Feb  2  2016 bin</span><br><span class="line">-rw-r--r--.  1 7161 wheel 17987 Feb  2  2016 COPYING</span><br><span class="line">drwxr-xr-x.  2 root root   4096 Nov 24 09:38 data</span><br><span class="line">drwxr-xr-x.  2 7161 wheel  4096 Feb  2  2016 docs</span><br><span class="line">drwxr-xr-x.  3 7161 wheel  4096 Feb  2  2016 include</span><br><span class="line">drwxr-xr-x.  5 7161 wheel  4096 Feb  2  2016 lib</span><br><span class="line">drwxr-xr-x.  4 7161 wheel  4096 Feb  2  2016 man</span><br><span class="line">-rw-r--r--.  1 7161 wheel  2478 Feb  2  2016 README</span><br><span class="line">drwxr-xr-x. 28 7161 wheel  4096 Feb  2  2016 share</span><br><span class="line">drwxr-xr-x.  2 7161 wheel  4096 Feb  2  2016 support-files</span><br><span class="line">drwxr-xr-x.  2 root root   4096 Nov 24 09:38 tmp</span><br></pre></td></tr></table></figure>

<p>arch:binlog日志存储的文件夹</p>
<h3 id="2-创建配置文件-etc-my-cnf"><a href="#2-创建配置文件-etc-my-cnf" class="headerlink" title="2.创建配置文件/etc/my.cnf"></a>2.创建配置文件/etc/my.cnf</h3><p>#defualt start: /etc/my.cnf-&gt;/etc/mysql/my.cnf-&gt;SYSCONFDIR/my.cnf-&gt;$MYSQL_HOME/my.cnf-&gt; –defaults-extra-file-&gt;~/my.cnf </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]#vi /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /usr/local/mysql/data/mysql.sock</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /usr/local/mysql/data/mysql.sock</span><br><span class="line">#user 			= mysqladmin</span><br><span class="line"></span><br><span class="line">skip-slave-start</span><br><span class="line"></span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size = 256M</span><br><span class="line">sort_buffer_size = 2M</span><br><span class="line">read_buffer_size = 2M</span><br><span class="line">read_rnd_buffer_size = 4M</span><br><span class="line">query_cache_size= 32M</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line">myisam_sort_buffer_size=128M</span><br><span class="line">tmp_table_size=32M</span><br><span class="line"></span><br><span class="line">table_open_cache = 512</span><br><span class="line">thread_cache_size = 8</span><br><span class="line">wait_timeout = 86400</span><br><span class="line">interactive_timeout = 86400</span><br><span class="line">max_connections = 600</span><br><span class="line"></span><br><span class="line"># Try number of CPU&#x27;s*2 for thread_concurrency</span><br><span class="line">#thread_concurrency = 32 </span><br><span class="line"></span><br><span class="line">#isolation level and default engine </span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line">transaction-isolation = READ-COMMITTED</span><br><span class="line"></span><br><span class="line">server-id  = 1739</span><br><span class="line">basedir     = /usr/local/mysql</span><br><span class="line">datadir     = /usr/local/mysql/data</span><br><span class="line">pid-file     = /usr/local/mysql/data/hostname.pid</span><br><span class="line"></span><br><span class="line">#open performance schema</span><br><span class="line">log-warnings</span><br><span class="line">sysdate-is-now</span><br><span class="line"></span><br><span class="line">binlog_format = ROW</span><br><span class="line">log_bin_trust_function_creators=1</span><br><span class="line">log-error  = /usr/local/mysql/data/hostname.err</span><br><span class="line">log-bin = /usr/local/mysql/arch/mysql-bin</span><br><span class="line">expire_logs_days = 7</span><br><span class="line"></span><br><span class="line">innodb_write_io_threads=16</span><br><span class="line"></span><br><span class="line">relay-log  = /usr/local/mysql/relay_log/relay-log</span><br><span class="line">relay-log-index = /usr/local/mysql/relay_log/relay-log.index</span><br><span class="line">relay_log_info_file= /usr/local/mysql/relay_log/relay-log.info</span><br><span class="line"></span><br><span class="line">log_slave_updates=1</span><br><span class="line">gtid_mode=OFF</span><br><span class="line">enforce_gtid_consistency=OFF</span><br><span class="line"></span><br><span class="line"># slave</span><br><span class="line">slave-parallel-type=LOGICAL_CLOCK</span><br><span class="line">slave-parallel-workers=4</span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br><span class="line">relay_log_recovery=ON</span><br><span class="line"></span><br><span class="line">#other logs</span><br><span class="line">#general_log =1</span><br><span class="line">#general_log_file  = /usr/local/mysql/data/general_log.err</span><br><span class="line">#slow_query_log=1</span><br><span class="line">#slow_query_log_file=/usr/local/mysql/data/slow_log.err</span><br><span class="line"></span><br><span class="line">#for replication slave</span><br><span class="line">sync_binlog = 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#for innodb options </span><br><span class="line">innodb_data_home_dir = /usr/local/mysql/data/</span><br><span class="line">innodb_data_file_path = ibdata1:1G;ibdata2:1G:autoextend</span><br><span class="line"></span><br><span class="line">innodb_log_group_home_dir = /usr/local/mysql/arch</span><br><span class="line">innodb_log_files_in_group = 4</span><br><span class="line">innodb_log_file_size = 1G</span><br><span class="line">innodb_log_buffer_size = 200M</span><br><span class="line"></span><br><span class="line">#根据生产需要，调整pool size </span><br><span class="line">innodb_buffer_pool_size = 2G</span><br><span class="line">#innodb_additional_mem_pool_size = 50M #deprecated in 5.6</span><br><span class="line">tmpdir = /usr/local/mysql/tmp</span><br><span class="line"></span><br><span class="line">innodb_lock_wait_timeout = 1000</span><br><span class="line">#innodb_thread_concurrency = 0</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line"></span><br><span class="line">innodb_locks_unsafe_for_binlog=1</span><br><span class="line"></span><br><span class="line">#innodb io features: add for mysql5.5.8</span><br><span class="line">performance_schema</span><br><span class="line">innodb_read_io_threads=4</span><br><span class="line">innodb-write-io-threads=4</span><br><span class="line">innodb-io-capacity=200</span><br><span class="line">#purge threads change default(0) to 1 for purge</span><br><span class="line">innodb_purge_threads=1</span><br><span class="line">innodb_use_native_aio=on</span><br><span class="line"></span><br><span class="line">#case-sensitive file names and separate tablespace</span><br><span class="line">innodb_file_per_table = 1</span><br><span class="line">lower_case_table_names=1</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 128M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = 256M</span><br><span class="line">sort_buffer_size = 256M</span><br><span class="line">read_buffer = 2M</span><br><span class="line">write_buffer = 2M</span><br></pre></td></tr></table></figure>

<p>根据生产需要，调整pool size，生产上：innodb_buffer_pool_size = 2G</p>
<h3 id="3-创建用户组及用户"><a href="#3-创建用户组及用户" class="headerlink" title="3.创建用户组及用户"></a>3.创建用户组及用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# groupadd -g 101 dba</span><br><span class="line">[root@hadoop001 mysql]# useradd -u 514 -g dba -G root -d /usr/local/mysql mysqladmin</span><br><span class="line">[root@hadoop001 mysql]# id mysqladmin</span><br><span class="line">uid=514(mysqladmin) gid=101(dba) groups=101(dba),0(root)</span><br></pre></td></tr></table></figure>

<p>一般不需要设置mysqladmin的密码，直接从root或者LDAP用户sudo切换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# passwd mysqladmin</span><br><span class="line">Changing password for user mysqladmin.</span><br><span class="line">New password: </span><br><span class="line">BAD PASSWORD: it is too simplistic/systematic</span><br><span class="line">BAD PASSWORD: is too simple</span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>

<p>如果mysqladmin用户已经存在，更改用户组及home目录地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# usermod -u 514 -g dba -G root -d /usr/local/mysql mysqladmin</span><br></pre></td></tr></table></figure>

<p>copy 环境变量配置文件至mysqladmin用户的home目录中,为了以下步骤配置个人环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# cp /etc/skel/.* /usr/local/mysql</span><br><span class="line">cp: omitting directory `/etc/skel/.&#x27;</span><br><span class="line">cp: omitting directory `/etc/skel/..&#x27;</span><br><span class="line">cp: omitting directory `/etc/skel/.gnome2&#x27;</span><br><span class="line">cp: omitting directory `/etc/skel/.mozilla&#x27;</span><br><span class="line">[root@hadoop001 mysql]# su - mysqladmin</span><br><span class="line">[mysqladmin@hadoop001 ~]$ exit</span><br><span class="line">logout</span><br><span class="line">[root@hadoop001 mysql]# </span><br></pre></td></tr></table></figure>

<h3 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4.配置环境变量"></a>4.配置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# vi .bash_profile</span><br><span class="line"># .bash_profile</span><br><span class="line"># Get the aliases and functions</span><br><span class="line"></span><br><span class="line">if [ -f ~/.bashrc ]; then</span><br><span class="line">        . ~/.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># User specific environment and startup programs</span><br><span class="line">export MYSQL_BASE=/usr/local/mysql</span><br><span class="line">export PATH=$&#123;MYSQL_BASE&#125;/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unset USERNAME</span><br><span class="line"></span><br><span class="line">#stty erase ^H</span><br><span class="line">set umask to 022</span><br><span class="line">umask 022</span><br><span class="line">PS1=`uname -n`&quot;:&quot;&#x27;$USER&#x27;&quot;:&quot;&#x27;$PWD&#x27;&quot;:&gt;&quot;; export PS1</span><br></pre></td></tr></table></figure>

<h3 id="5-赋权限和用户组"><a href="#5-赋权限和用户组" class="headerlink" title="5.赋权限和用户组"></a>5.赋权限和用户组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# chown mysqladmin:dba /etc/my.cnf</span><br><span class="line">[root@hadoop001 mysql]# chmod  640 /etc/my.cnf  </span><br><span class="line">[root@hadoop001 mysql]# ll /etc/my.cnf</span><br><span class="line">-rw-r-----. 1 mysqladmin dba 2218 Nov 15 01:07 /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[root@hadoop001 mysql]# chown -R mysqladmin:dba /usr/local/mysql</span><br><span class="line">[root@hadoop001 mysql]# chown -R mysqladmin:dba /usr/local/mysql/*</span><br><span class="line">[root@hadoop001 mysql]# chown -R mysqladmin:dba /usr/local/mysql-5.7.11-linux-glibc2.5-x86_64</span><br><span class="line"></span><br><span class="line">[root@hadoop001 mysql]# chmod -R 755 /usr/local/mysql </span><br><span class="line">[root@hadoop001 mysql]# chmod -R 755 /usr/local/mysql/*</span><br><span class="line">[root@hadoop001 mysql]# chmod -R 755 /usr/local/mysql-5.7.11-linux-glibc2.5-x86_64 </span><br></pre></td></tr></table></figure>

<h3 id="6-配置服务及开机自启动"><a href="#6-配置服务及开机自启动" class="headerlink" title="6.配置服务及开机自启动"></a>6.配置服务及开机自启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#将服务文件拷贝到init.d下，并重命名为mysql</span><br><span class="line">[root@hadoop001 mysql]# cp support-files/mysql.server /etc/rc.d/init.d/mysql </span><br><span class="line">#赋予可执行权限</span><br><span class="line">[root@hadoop001 mysql]# chmod +x /etc/rc.d/init.d/mysql</span><br><span class="line">#删除服务</span><br><span class="line">[root@hadoop001 mysql]# chkconfig --del mysql</span><br><span class="line">#添加服务</span><br><span class="line">[root@hadoop001 mysql]# chkconfig --add mysql</span><br><span class="line">[root@hadoop001 mysql]# chkconfig --level 345 mysql on</span><br><span class="line">#开机自启动</span><br><span class="line">[root@hadoop001 mysql]# vi /etc/rc.local </span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line"># THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES</span><br><span class="line">#</span><br><span class="line"># It is highly advisable to create own systemd services or udev rules</span><br><span class="line"># to run scripts during boot instead of using this file.</span><br><span class="line">#</span><br><span class="line"># In contrast to previous versions due to parallel execution during boot</span><br><span class="line"># this script will NOT be run after all other services.</span><br><span class="line">#</span><br><span class="line"># Please note that you must run &#x27;chmod +x /etc/rc.d/rc.local&#x27; to ensure</span><br><span class="line"># that this script will be executed during boot.</span><br><span class="line"></span><br><span class="line">touch /var/lock/subsys/local</span><br><span class="line">su - mysqladmin -c &quot;/etc/init.d/mysql start --federated&quot;</span><br></pre></td></tr></table></figure>

<h3 id="7-安装"><a href="#7-安装" class="headerlink" title="7.安装"></a>7.安装</h3><p>安装libaio及安装mysql的初始db</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# yum -y install libaio</span><br><span class="line">[root@hadoop001 mysql]# su - mysqladmin</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;bin/mysqld \</span><br><span class="line">&gt; --defaults-file=/etc/my.cnf \</span><br><span class="line">&gt; --user=mysqladmin \</span><br><span class="line">&gt; --basedir=/usr/local/mysql/ \</span><br><span class="line">&gt; --datadir=/usr/local/mysql/data/ \</span><br><span class="line">&gt; --initialize</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;</span><br></pre></td></tr></table></figure>

<p>在初始化时如果加上 –initial-insecure，则会创建空密码的 root@localhost 账号，否则会创建带密码的 root@localhost 账号，密码直接写在 log-error 日志文件中（在5.6版本中是放在 ~/.mysql_secret 文件里，更加隐蔽，不熟悉的话可能会无所适从）</p>
<p>bin/mysqld –defaults-file=/etc/my.cnf –user=mysqladmin –basedir=/usr/local/mysql/ –datadir=/usr/local/mysql/data/ –initialize</p>
<p>查看临时密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop001:mysqladmin:/usr/local/mysql/data:&gt;cat hostname.err | grep pass</span><br><span class="line">2021-11-24T06:05:28.300539Z 1 [Note] A temporary password is generated for root@localhost: uhsa*57&gt;hacF</span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动Mysql时报错：mysqld_safe mysqld from pid file /usr/local/mysql/data/Linux.pid ended。参考文章<a href="https://blog.csdn.net/alwaysbefine/article/details/107216380">Linux The server quit without updating PID file的几种解决方法</a>发现，是之前在运行5.6版本的Mysql仍在后台运行，占用pid文件，解决方法：ps -ef|grep mysql找出进程，然后kill掉进程后再重新安装。</p>
</li>
<li><p>若遇到报错，需要重新安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/local/mysql/arch/*</span><br><span class="line">rm -rf /usr/local/mysql/data/*</span><br></pre></td></tr></table></figure>

<p>然后跳到第7步</p>
</li>
</ul>
<h3 id="8-启动"><a href="#8-启动" class="headerlink" title="8.启动"></a>8.启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 mysql]# mysql --version</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.11, for linux-glibc2.5 (x86_64) using  EditLine wrapper</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;service mysql start</span><br><span class="line">Starting MySQL..                                           [  OK  ]</span><br></pre></td></tr></table></figure>

<h3 id="9-登录及修改用户密码"><a href="#9-登录及修改用户密码" class="headerlink" title="9.登录及修改用户密码"></a>9.登录及修改用户密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;mysql -uroot -p&#x27;&gt;Wo&gt;kh(GL7;D&#x27;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.11-log</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; alter user root@localhost identified by &#x27;syncdb123!&#x27;;//rd1</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;syncdb123!&#x27;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit;</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>

<p>重要的三句话：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;create database ruozedata;</span><br><span class="line">mysql&gt;grant all privileges on ruozedata.* to ruoze@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure>



<h3 id="10-重启"><a href="#10-重启" class="headerlink" title="10.重启"></a>10.重启</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;service mysql restart</span><br><span class="line">Shutting down MySQL..                                      [  OK  ]</span><br><span class="line">rm: cannot remove `/var/lock/subsys/mysql&#x27;: Permission denied</span><br><span class="line">Starting MySQL.                                            [  OK  ]</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.11-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure>



<h2 id="3-（个人）重启机器后遇到问题"><a href="#3-（个人）重启机器后遇到问题" class="headerlink" title="3.（个人）重启机器后遇到问题"></a>3.（个人）重启机器后遇到问题</h2><p>当我重启机器后，mysqladmin并不能直接service mysql start启动Mysql服务，查看data文件夹内发现有 </p>
<p><code>-rw-r-----. 1 mysql dba  53440 Nov 25 00:40 hostname.err</code></p>
<p>即用户权限出现问题。然后切回root用户修改data/*的用户：用户组为mysqladmin:dba再启动，问题解决，过程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop001 ~]# service mysql status</span><br><span class="line">MySQL is not running, but lock file (/var/lock/subsys/mysql[FAILED]</span><br><span class="line">[root@hadoop001 ~]# service mysql start</span><br><span class="line">Starting MySQL.The server quit without updating PID file (/usr/local/mysql/data/hadoop001.pid).                                                          [FAILED]</span><br><span class="line">[root@hadoop001 ~]# su - mysqladmin</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;service mysql start</span><br><span class="line">Starting MySQL.The server quit without updating PID file (/usr/local/mysql/data/hadoop001.pid).                                                          [FAILED]</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;ll</span><br><span class="line">total 68</span><br><span class="line">drwxr-xr-x.  2 mysqladmin dba  4096 Nov 25 00:35 arch</span><br><span class="line">drwxr-xr-x.  2 mysqladmin dba  4096 Feb  2  2016 bin</span><br><span class="line">-rwxr-xr-x.  1 mysqladmin dba 17987 Feb  2  2016 COPYING</span><br><span class="line">drwxr-xr-x.  5 mysqladmin dba  4096 Nov 25 00:40 data</span><br><span class="line">drwxr-xr-x.  2 mysqladmin dba  4096 Feb  2  2016 docs</span><br><span class="line">drwxr-xr-x.  3 mysqladmin dba  4096 Feb  2  2016 include</span><br><span class="line">drwxr-x---.  2 mysqladmin dba  4096 Nov 24 13:15 keyring</span><br><span class="line">drwxr-xr-x.  5 mysqladmin dba  4096 Feb  2  2016 lib</span><br><span class="line">drwxr-xr-x.  4 mysqladmin dba  4096 Feb  2  2016 man</span><br><span class="line">-rwxr-xr-x.  1 mysqladmin dba  2478 Feb  2  2016 README</span><br><span class="line">drwxr-xr-x. 28 mysqladmin dba  4096 Feb  2  2016 share</span><br><span class="line">drwxr-xr-x.  2 mysqladmin dba  4096 Feb  2  2016 support-files</span><br><span class="line">drwxr-xr-x.  2 mysqladmin dba  4096 Nov 25 00:35 tmp</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;ll data/</span><br><span class="line">total 2097248</span><br><span class="line">-rw-r-----. 1 mysqladmin dba         56 Nov 24 14:55 auto.cnf</span><br><span class="line">-rw-r-----. 1 mysql      dba      53440 Nov 25 00:40 hostname.err</span><br><span class="line">-rw-r-----. 1 mysqladmin dba        294 Nov 25 00:35 ib_buffer_pool</span><br><span class="line">-rw-r-----. 1 mysqladmin dba 1073741824 Nov 25 00:35 ibdata1</span><br><span class="line">-rw-r-----. 1 mysqladmin dba 1073741824 Nov 24 14:55 ibdata2</span><br><span class="line">drwxr-x---. 2 mysqladmin dba       4096 Nov 24 14:55 mysql</span><br><span class="line">drwxr-x---. 2 mysqladmin dba       4096 Nov 24 14:55 performance_schema</span><br><span class="line">drwxr-x---. 2 mysqladmin dba      12288 Nov 24 14:55 sys</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;exit</span><br><span class="line">logout</span><br><span class="line">[root@hadoop001 ~]# chown mysqladmin:dba /usr/local/mysql/*</span><br><span class="line">[root@hadoop001 ~]# chown mysqladmin:dba /usr/local/mysql/data/*</span><br><span class="line">[root@hadoop001 ~]# su - mysqladmin</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;ll data/</span><br><span class="line">total 2097248</span><br><span class="line">-rw-r-----. 1 mysqladmin dba         56 Nov 24 14:55 auto.cnf</span><br><span class="line">-rw-r-----. 1 mysqladmin dba      53440 Nov 25 00:40 hostname.err</span><br><span class="line">-rw-r-----. 1 mysqladmin dba        294 Nov 25 00:35 ib_buffer_pool</span><br><span class="line">-rw-r-----. 1 mysqladmin dba 1073741824 Nov 25 00:35 ibdata1</span><br><span class="line">-rw-r-----. 1 mysqladmin dba 1073741824 Nov 24 14:55 ibdata2</span><br><span class="line">drwxr-x---. 2 mysqladmin dba       4096 Nov 24 14:55 mysql</span><br><span class="line">drwxr-x---. 2 mysqladmin dba       4096 Nov 24 14:55 performance_schema</span><br><span class="line">drwxr-x---. 2 mysqladmin dba      12288 Nov 24 14:55 sys</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;service mysql start</span><br><span class="line">Starting MySQL.                                            [  OK  ]</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;ll data/</span><br><span class="line">total 2109552</span><br><span class="line">-rw-r-----. 1 mysqladmin dba         56 Nov 24 14:55 auto.cnf</span><br><span class="line">-rw-r-----. 1 mysqladmin dba          5 Nov 25 00:41 hadoop001.pid</span><br><span class="line">-rw-r-----. 1 mysqladmin dba      57597 Nov 25 00:41 hostname.err</span><br><span class="line">-rw-r-----. 1 mysqladmin dba        294 Nov 25 00:35 ib_buffer_pool</span><br><span class="line">-rw-r-----. 1 mysqladmin dba 1073741824 Nov 25 00:41 ibdata1</span><br><span class="line">-rw-r-----. 1 mysqladmin dba 1073741824 Nov 24 14:55 ibdata2</span><br><span class="line">-rw-r-----. 1 mysqladmin dba   12582912 Nov 25 00:41 ibtmp1</span><br><span class="line">drwxr-x---. 2 mysqladmin dba       4096 Nov 24 14:55 mysql</span><br><span class="line">-rw-rw----. 1 mysqladmin dba          5 Nov 25 00:41 mysqld_safe.pid</span><br><span class="line">srwxrwxrwx. 1 mysqladmin dba          0 Nov 25 00:41 mysql.sock</span><br><span class="line">-rw-------. 1 mysqladmin dba          5 Nov 25 00:41 mysql.sock.lock</span><br><span class="line">drwxr-x---. 2 mysqladmin dba       4096 Nov 24 14:55 performance_schema</span><br><span class="line">drwxr-x---. 2 mysqladmin dba      12288 Nov 24 14:55 sys</span><br><span class="line">hadoop001:mysqladmin:/usr/local/mysql:&gt;exit</span><br><span class="line">logout</span><br><span class="line">[root@hadoop001 ~]# </span><br></pre></td></tr></table></figure>

<p>再次重启，问题再次出现，hostname.err的用户用户组为：mysql:mysqladmin</p>
<p>经查阅，发现my.cnf中[mysqld]下有默认启动用户<code>user = mysql</code>，指定为<code>user = mysqladmin</code>后重启，问题不再出现，且mysql服务开机自启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /usr/local/mysql/data/mysql.sock</span><br><span class="line">#以下注释为默认参数，不指定的话，user=mysql</span><br><span class="line">#user 			= mysql</span><br><span class="line">user 			= mysqladmin</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
